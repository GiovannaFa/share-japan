<div class="card">
    <div class="card-header bg-light">
        <h3 class="card-title text-white">
            <i>Upload an image</i>
            <p><a href="/">back to posts</a></p>
        </h3>
    </div>
    <div class="card-body">
        <form action="/posts" method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <select name="city" id="city-select">
                    <option selected value={{where.city}}>Select a city</option>
                    <!-- Cities will be inserted here by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <select name="prefecture" id="prefecture-select">
                    <option selected value={{where.prefecture}}/>
                    <!-- Prefectures will be inserted here by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <select name="category" id="category-select">
                    <option selected value={{about.category}}>Select a category</option>
                    <!-- Categories will be inserted here by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <select name="subcategory" id="subcategory-select">
                    <option selected value={{about.subcategory}}/>
                    <!-- Subcategories will be inserted here by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <input type="text" name="title" class="form-control" placeholder="Title for your post" required value={{title}}>
            </div>

            <div class="form-group">
                <textarea name="description" id="" cols="" rows="6" class="form-control" placeholder="Write your post" required value={{description}}></textarea>
            </div>

            <div class="form-group">
                <div class="input-group">
                    <div class="custom-file">
                        <!-- File input that is triggered by the Upload button -->
                        <input type="file" name="images" class="custom-file-input" id="inputGroup" aria-describedby="inputGroupFileAddon" multiple>
                        <label class="custom-file-label" for="inputGroup" id="uploadButton">Choose your files</label>
                    </div>
                </div>
            </div>

            <!-- Preview container for images and videos -->
            <div id="image-preview" class="form-group"></div>

            <!-- Error message displayed when file type is invalid -->
            <div id="error-message" class="text-danger" style="display: none;"></div>

            <!-- Upload button that triggers the file input -->
            <div class="form-group">
                <button class="btn-upload" >Upload</button>
            </div>
            <script>
                let selectedFiles = []; // Track selected files

                // Handle the "Upload" button click to trigger the file input
                document.getElementById('uploadButton').addEventListener('click', function(event) {
                    event.preventDefault(); // Prevent the button from submitting the form
                    document.getElementById('inputGroup').click(); // Trigger the hidden file input to open
                });

                // Listen for file selection and process the files
                document.getElementById('inputGroup').addEventListener('change', function(event) {
                    const fileInput = event.target;
                    const errorMessage = document.getElementById('error-message');
                    const allowedExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.mp4'];
                    const files = fileInput.files;
                    const previewContainer = document.getElementById('image-preview');

                    // Clear previous error message
                    errorMessage.style.display = 'none';

                    // Keep track of valid files
                    let hasInvalidFile = false;
                    let validFiles = [];

                    // Loop through all selected files and validate their extensions
                    for (let i = 0; i < files.length; i++) {
                        const file = files[i];
                        const fileName = file.name.toLowerCase();
                        const fileExtension = fileName.substring(fileName.lastIndexOf('.'));

                        if (!allowedExtensions.includes(fileExtension)) {
                            hasInvalidFile = true;
                        } else {
                            validFiles.push(file);
                        }
                    }

                    // If any file is invalid, show error message and stop processing
                    if (hasInvalidFile) {
                        // Update the error message and show it
                        errorMessage.style.display = 'block';
                        errorMessage.textContent = 'Invalid file type. Please upload a .png, .jpg, .jpeg, .gif, or .mp4 file.';
                    }

                    // Hide the error message after 3 seconds
                    setTimeout(function() {
                        errorMessage.style.display = 'none';
                    }, 3000); // 3000 milliseconds = 3 seconds

                    // If there are valid files, process and show their previews
                    validFiles.forEach(file => {
                        // Only create a preview if the file is not already added
                        if (!selectedFiles.includes(file)) {
                            const reader = new FileReader();

                            // Create a new wrapper for each file
                            const imgWrapper = document.createElement('div');
                            imgWrapper.classList.add('file-wrapper');

                            // Create the delete button
                            const deleteBtn = document.createElement('button');
                            deleteBtn.classList.add('delete-btn');
                            deleteBtn.innerHTML = '&times;'; // "X" symbol
                            imgWrapper.appendChild(deleteBtn); // Add the delete button to the wrapper

                            reader.onload = function(e) {
                                if (file.type.startsWith('image/') || file.name.endsWith('.gif')) {
                                    const img = document.createElement('img');
                                    img.src = e.target.result;
                                    img.classList.add('img-thumbnail');
                                    imgWrapper.appendChild(img);
                                } else if (file.type === 'video/mp4') {
                                    const video = document.createElement('video');
                                    video.src = e.target.result;
                                    video.classList.add('video-thumbnail'); // Video styling
                                    video.controls = true; // Add controls for play/pause
                                    imgWrapper.appendChild(video);
                                }
                            };

                            // Append the wrapper (with preview) to the preview container
                            previewContainer.appendChild(imgWrapper);

                            // Store the valid file in the selectedFiles array
                            selectedFiles.push(file);

                            // Delete button functionality
                            deleteBtn.addEventListener('click', function() {
                                // Remove the file from the selectedFiles array
                                const index = selectedFiles.indexOf(file);
                                if (index > -1) {
                                    selectedFiles.splice(index, 1); // Remove the file from the array
                                }

                                // Remove the preview from the DOM
                                previewContainer.removeChild(imgWrapper);

                                // Update the file input's file list after deletion
                                updateFileInput();
                            });

                            // Read the file as a data URL to generate a preview
                            reader.readAsDataURL(file);
                        }
                    });

                    // Update the file input list after processing valid files
                    updateFileInput();
                });

                // Function to update the file input's list of files after deletion
                function updateFileInput() {
                    const input = document.getElementById('inputGroup');
                    const dataTransfer = new DataTransfer(); // Create a new DataTransfer object

                    // Add all the remaining files in the selectedFiles array to the new file list
                    selectedFiles.forEach(file => {
                        dataTransfer.items.add(file);
                    });

                    // Set the new file list to the file input's files property
                    input.files = dataTransfer.files;
                }

                // Function to fetch the cities JSON data
                function fetchCitiesData() {
                    return fetch('http://localhost:3005/public/data/cities.json')
                        .then(response => response.json())
                        .catch(error => {
                            console.error('Error fetching cities data:', error);
                            throw error; // Rethrow error so it can be handled by the caller
                        });
                }

                // Function to load the cities and prefectures and populate the select dropdowns
                function loadCitiesAndPrefectures() {
                    // Fetch the data from the external JSON file
                    fetchCitiesData()
                        .then(data => {
                            const citiesByPrefecture = {};
                            const cityToPrefectures = {};

                            // Organize data into a map for cities and prefectures
                            data.forEach(item => {
                                if (!citiesByPrefecture[item.prefecture]) {
                                    citiesByPrefecture[item.prefecture] = [];
                                }
                                citiesByPrefecture[item.prefecture].push(item.city);

                                // Also map city to its prefecture(s)
                                if (!cityToPrefectures[item.city]) {
                                    cityToPrefectures[item.city] = [];
                                }
                                cityToPrefectures[item.city].push(item.prefecture);
                            });

                            // Get the city select dropdown and prefecture select dropdown
                            const citySelect = document.getElementById('city-select');
                            const prefectureSelect = document.getElementById('prefecture-select');

                            // Populate the city dropdown with unique cities
                            const uniqueCities = Object.keys(cityToPrefectures).sort((a, b) => a.localeCompare(b));
                            uniqueCities.forEach(city => {
                                const option = document.createElement('option');
                                option.value = city;
                                option.textContent = city;
                                citySelect.appendChild(option);
                            });

                            // Handle change in city selection
                            citySelect.addEventListener('change', function() {
                                const selectedCity = this.value;

                                // Clear previous prefecture options
                                prefectureSelect.innerHTML = '<option selected value="">Select the Prefecture</option>';

                                if (selectedCity) {
                                    // Get the prefectures related to the selected city
                                    const prefectures = cityToPrefectures[selectedCity];

                                    if (prefectures && prefectures.length > 0) {
                                        // Prefectures found for this city
                                        prefectures.forEach(prefecture => {
                                            const option = document.createElement('option');
                                            option.value = prefecture;
                                            option.textContent = prefecture;
                                            prefectureSelect.appendChild(option);
                                        });

                                        // If the city belongs to only one prefecture, select it automatically
                                        if (prefectures.length === 1) {
                                            prefectureSelect.value = prefectures[0];  // Auto-select the only prefecture
                                        }
                                    } else {
                                        // No prefecture found (edge case, should not normally happen)
                                        console.error("No prefecture found for city: " + selectedCity);
                                    }

                                    // Ensure the prefecture select dropdown is shown
                                    prefectureSelect.style.display = 'block';
                                } else {
                                    // Hide the prefecture select dropdown if no city is selected
                                    prefectureSelect.style.display = 'none';
                                }
                            });

                            // Ensure the prefecture dropdown is hidden initially if no city is selected
                            prefectureSelect.style.display = 'none';
                        })
                        .catch(error => {
                            console.error('Error loading cities and prefectures:', error);
                        });
                }

                // Call the function when the document is ready
                document.addEventListener('DOMContentLoaded', loadCitiesAndPrefectures);

                // Function to fetch the categories JSON data
                function fetchCategoriesData() {
                    return fetch('http://localhost:3005/public/data/categories.json')
                        .then(response => response.json())
                        .catch(error => {
                            console.error('Error fetching categories data:', error);
                            throw error; // Rethrow error so it can be handled by the caller
                        });
                }

                // Function to load categories and subcategories and populate the select dropdowns
                function loadCategoriesAndSubcategories() {
                    // Fetch the data from the external JSON file
                    fetchCategoriesData()
                        .then(data => {
                            const categoriesBySubcategory = {};

                            // Organize data into a map for categories and subcategories
                            data.forEach(item => {
                                categoriesBySubcategory[item.category] = item.subcategory;
                            });

                            // Get the category select dropdown and subcategory select dropdown
                            const categorySelect = document.getElementById('category-select');
                            const subcategorySelect = document.getElementById('subcategory-select');

                            // Populate the category dropdown
                            Object.keys(categoriesBySubcategory).forEach(category => {
                                const option = document.createElement('option');
                                option.value = category;
                                option.textContent = category;
                                categorySelect.appendChild(option);
                            });

                            // Handle change in category selection
                            categorySelect.addEventListener('change', function () {
                                const selectedCategory = this.value;

                                // Clear previous subcategory options
                                subcategorySelect.innerHTML = '<option selected value="">Select the Subcategory</option>';

                                if (selectedCategory) {
                                    // Get the subcategories related to the selected category
                                    const subcategories = categoriesBySubcategory[selectedCategory];

                                    if (subcategories && subcategories.length > 0) {
                                        // Subcategories found for this category
                                        subcategories.forEach(subcategory => {
                                            const option = document.createElement('option');
                                            option.value = subcategory;
                                            option.textContent = subcategory;
                                            subcategorySelect.appendChild(option);
                                        });

                                        // If the category has only one subcategory, select it automatically
                                        if (subcategories.length === 1) {
                                            subcategorySelect.value = subcategories[0];  // Auto-select the only subcategory
                                        }
                                    } else {
                                        // No subcategory found (edge case, should not normally happen)
                                        console.error("No subcategory found for category: " + selectedCategory);
                                    }

                                    // Ensure the subcategory select dropdown is shown
                                    subcategorySelect.style.display = 'block';
                                } else {
                                    // Hide the subcategory select dropdown if no category is selected
                                    subcategorySelect.style.display = 'none';
                                }
                            });

                            // Ensure the subcategory dropdown is hidden initially if no category is selected
                            subcategorySelect.style.display = 'none';
                        })
                        .catch(error => {
                            console.error('Error loading categories and subcategories:', error);
                        });
                }

                // Call the function when the document is ready
                document.addEventListener('DOMContentLoaded', loadCategoriesAndSubcategories);

            </script>
        </form>
    </div>
</div>