<div class="card">
    <div class="card-header bg-light">
        <h3 class="card-title text-white">
            <i>Upload an image</i>
            <p><a href="/">back to posts</a></p>
        </h3>
    </div>
    <div class="card-body">
        <form action="/posts" method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <select name="where">
                    <option selected value={{where}}> Select a city </option>
                    <option value="tokyo">TOKYO</option>
                    <option value="kyoto">KYOTO</option>
                    <option value="osaka">OSAKA</option>
                    <option value="sapporo">SAPPORO</option>
                    <option value="okinawa">OKINAWA</option>
                    <option value="sendai">SENDAI</option>
                    <option value="fukuoka">FUKUOKA</option>
                </select>
            </div>

            <div class="form-group">
                {{!-- <input type="text" name="about" class="form-control" placeholder="What is it about" required> --}}
                <select name="about">
                    <option selected value={{about}}> What is it about? </option>
                    <option value="food">FOOD</option>
                    <option value="night_life">NIGHT LIFE</option>
                    <option value="anecdote">ANECDOTE</option>
                    <option value="for_free">FOR FREE</option>
                    <option value="itinerary">ITINERARY</option>
                </select>
            </div>

            <div class="form-group">
                <input type="text" name="title" class="form-control" placeholder="Title for your post" required value={{title}}>
            </div>

            <div class="form-group">
                <textarea name="description" id="" cols="" rows="6" class="form-control" placeholder="Write your post" required value={{description}}></textarea>
            </div>

            <div class="form-group">
                <div class="input-group">
                    <div class="custom-file">
                        <!-- File input that is triggered by the Upload button -->
                        <input type="file" name="images" class="custom-file-input" id="inputGroup" aria-describedby="inputGroupFileAddon" multiple>
                        <label class="custom-file-label" for="inputGroup" id="uploadButton">Choose your files</label>
                    </div>
                </div>
            </div>

            <!-- Preview container for images and videos -->
            <div id="image-preview" class="form-group"></div>

            <!-- Error message displayed when file type is invalid -->
            <div id="error-message" class="text-danger" style="display: none;"></div>

            <!-- Upload button that triggers the file input -->
            <div class="form-group">
                <button class="btn btn-upload" >Upload</button>
            </div>


            <script>
                let selectedFiles = []; // Track selected files

                // Handle the "Upload" button click to trigger the file input
                document.getElementById('uploadButton').addEventListener('click', function(event) {
                    event.preventDefault(); // Prevent the button from submitting the form
                    document.getElementById('inputGroup').click(); // Trigger the hidden file input to open
                });

                // Listen for file selection and process the files
                document.getElementById('inputGroup').addEventListener('change', function(event) {
                    const fileInput = event.target;
                    const errorMessage = document.getElementById('error-message');
                    const allowedExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.mp4'];
                    const files = fileInput.files;
                    const previewContainer = document.getElementById('image-preview');

                    // Clear previous error message
                    errorMessage.style.display = 'none';

                    // Keep track of valid files
                    let hasInvalidFile = false;
                    let validFiles = [];

                    // Loop through all selected files and validate their extensions
                    for (let i = 0; i < files.length; i++) {
                        const file = files[i];
                        const fileName = file.name.toLowerCase();
                        const fileExtension = fileName.substring(fileName.lastIndexOf('.'));

                        if (!allowedExtensions.includes(fileExtension)) {
                            hasInvalidFile = true;
                        } else {
                            validFiles.push(file);
                        }
                    }

                    // If any file is invalid, show error message and stop processing
                    if (hasInvalidFile) {
                        // Update the error message and show it
                        errorMessage.style.display = 'block';
                        errorMessage.textContent = 'Invalid file type. Please upload a .png, .jpg, .jpeg, .gif, or .mp4 file.';
                    }

                    // Hide the error message after 3 seconds
                    setTimeout(function() {
                        errorMessage.style.display = 'none';
                    }, 3000); // 3000 milliseconds = 3 seconds

                    // If there are valid files, process and show their previews
                    validFiles.forEach(file => {
                        // Only create a preview if the file is not already added
                        if (!selectedFiles.includes(file)) {
                            const reader = new FileReader();

                            // Create a new wrapper for each file
                            const imgWrapper = document.createElement('div');
                            imgWrapper.classList.add('file-wrapper');

                            // Create the delete button
                            const deleteBtn = document.createElement('button');
                            deleteBtn.classList.add('delete-btn');
                            deleteBtn.innerHTML = '&times;'; // "X" symbol
                            imgWrapper.appendChild(deleteBtn); // Add the delete button to the wrapper

                            reader.onload = function(e) {
                                if (file.type.startsWith('image/') || file.name.endsWith('.gif')) {
                                    const img = document.createElement('img');
                                    img.src = e.target.result;
                                    img.classList.add('img-thumbnail');
                                    imgWrapper.appendChild(img);
                                } else if (file.type === 'video/mp4') {
                                    const video = document.createElement('video');
                                    video.src = e.target.result;
                                    video.classList.add('video-thumbnail'); // Video styling
                                    video.controls = true; // Add controls for play/pause
                                    imgWrapper.appendChild(video);
                                }
                            };

                            // Append the wrapper (with preview) to the preview container
                            previewContainer.appendChild(imgWrapper);

                            // Store the valid file in the selectedFiles array
                            selectedFiles.push(file);

                            // Delete button functionality
                            deleteBtn.addEventListener('click', function() {
                                // Remove the file from the selectedFiles array
                                const index = selectedFiles.indexOf(file);
                                if (index > -1) {
                                    selectedFiles.splice(index, 1); // Remove the file from the array
                                }

                                // Remove the preview from the DOM
                                previewContainer.removeChild(imgWrapper);

                                // Update the file input's file list after deletion
                                updateFileInput();
                            });

                            // Read the file as a data URL to generate a preview
                            reader.readAsDataURL(file);
                        }
                    });

                    // Update the file input list after processing valid files
                    updateFileInput();
                });

                // Function to update the file input's list of files after deletion
                function updateFileInput() {
                    const input = document.getElementById('inputGroup');
                    const dataTransfer = new DataTransfer(); // Create a new DataTransfer object

                    // Add all the remaining files in the selectedFiles array to the new file list
                    selectedFiles.forEach(file => {
                        dataTransfer.items.add(file);
                    });

                    // Set the new file list to the file input's files property
                    input.files = dataTransfer.files;
                }
            </script>
        </form>
    </div>
</div>