<div class="card">
    <div class="card-header bg-light">
        <h3 class="card-title text-white">
            <i>Modify your post</i>
        </h3>
    </div>
    <div class="card-body">
        <form action="/edit-form/{{ post._id }}?_method=PUT" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="_method" value="PUT">
            <div class="form-group">
                <select name="city" id="city-select">
                    <option selected value="{{post.where.city}}">{{post.where.city}}</option>
                    <!-- Cities will be inserted here by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <select name="prefecture" id="prefecture-select">
                    <option selected value={{post.where.prefecture}}>{{post.where.prefecture}}</option>
                    <!-- Cities will be inserted here by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <select name="category" id="category-select">
                    <option selected value={{post.about.category}}>{{post.about.category}}</option>
                    <!-- Categories will be inserted here by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <select name="subcategory" id="subcategory-select">
                    <option selected value={{post.about.subcategory}}>{{post.about.subcategory}}</option>
                    <!-- Subcategories will be inserted here by JavaScript -->
                </select>
            </div>
            <div class="form-group">
                <input type="text" name="title" class="form-control" value="{{post.title}}">
            </div>

            <div class="form-group">
                <textarea name="description" class="form-control" style="height: 35vh;">{{post.description}}</textarea>
            </div>
            
            <div class="form-group">
                <div class="input-group">
                    <div class="custom-file">
                        <!-- File input that is triggered by the Upload button -->
                        <input type="file" name="images" class="custom-file-input" id="inputGroup" multiple>
                        <label class="custom-file-label" for="inputGroup" id="uploadButton">Choose your files</label>
                    </div>
                </div>
            </div>

            <!-- Existing Files (images, videos, gifs) -->
            <div id="image-preview" class="form-group">
                {{#each post.filenames}}
                    <div class="file-wrapper" style="position: relative; display: inline-block; margin-right: 10px; margin-bottom: 10px;">
                        <img src="/public/upload/{{../post._id}}/{{this}}" alt="{{../post._id}}" class="img-thumbnail" style="max-width: 200px;">
                        <button class="delete-btn" 
                                style="position: absolute; top: 5px; right: 5px; background: rgba(0, 0, 0, 0.5); color: white; border: none; border-radius: 50%; cursor: pointer; padding: 5px; font-size: 16px;" 
                                data-filename="{{this}}">&times;</button>
                    </div>
                {{/each}}
            </div>


            <!-- Error message displayed when file type is invalid -->
            <div id="error-message" class="text-danger" style="display: none;"></div>

            <!-- Upload button -->
            <div class="form-group">
                <button type="submit" class="btn-upload">Save</button>
            </div>

            <!-- Container for Hidden Inputs (for deleted files) -->
            <div id="deleted-files-container">
                <input type="hidden" name="deleteFiles" value="">
            </div>

            <script>
                // Function to update the file input's list of files after deletion
                function updateFileInput() {
                    const input = document.getElementById('inputGroup');
                    const dataTransfer = new DataTransfer(); // Create a new DataTransfer object

                    // Add all the remaining files in the selectedFiles array to the new file list
                    selectedFiles.forEach(file => {
                        dataTransfer.items.add(file);
                    });

                    // Set the new file list to the file input's files property
                    input.files = dataTransfer.files;
                }

                let deleteFiles = []; // Track the files that are marked for deletion
                let selectedFiles = []; // Track selected files for upload

                // Event delegation: Handle delete button click for both existing and new images
                document.getElementById('image-preview').addEventListener('click', function(event) {
                    if (event.target.classList.contains('delete-btn')) {
                        const filename = event.target.getAttribute('data-filename');
                        
                        // Add the deleted file's name to the deleteFiles array
                        if (!deleteFiles.includes(filename)) {
                            deleteFiles.push(filename);
                        }

                        // Remove the file from the selectedFiles array
                        selectedFiles = selectedFiles.filter(file => file.name !== filename);

                        // Update the hidden input field with the updated deleteFiles array
                        const deleteInput = document.querySelector('input[name="deleteFiles"]');
                        deleteInput.value = deleteFiles.join(',');  // Update hidden input value with deleted filenames

                        // Optionally, remove the file from the preview (UI)
                        const imgWrapper = event.target.closest('.file-wrapper');
                        imgWrapper.remove();

                        // Update the file input list after deletion (if needed)
                        updateFileInput();
                    }
                });

                // Handle the file selection and show a preview for new uploads
                document.getElementById('inputGroup').addEventListener('change', function(event) {
                    const fileInput = event.target;
                    const errorMessage = document.getElementById('error-message');
                    const allowedExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.mp4'];
                    const files = fileInput.files;
                    const previewContainer = document.getElementById('image-preview');

                    // Clear previous error message
                    errorMessage.style.display = 'none';

                    // Keep track of valid files
                    let hasInvalidFile = false;
                    let validFiles = [];

                    // Loop through all selected files and validate their extensions
                    for (let i = 0; i < files.length; i++) {
                        const file = files[i];
                        const fileName = file.name.toLowerCase();
                        const fileExtension = fileName.substring(fileName.lastIndexOf('.'));

                        if (!allowedExtensions.includes(fileExtension)) {
                            hasInvalidFile = true;
                        } else {
                            validFiles.push(file);
                        }
                    }

                    // If any file is invalid, show error message and stop processing
                    if (hasInvalidFile) {
                        errorMessage.style.display = 'block';
                        errorMessage.textContent = 'Invalid file type. Please upload a .png, .jpg, .jpeg, .gif, or .mp4 file.';
                    }

                    // Hide the error message after 3 seconds
                    setTimeout(function() {
                        errorMessage.style.display = 'none';
                    }, 3000);

                    // If there are valid files, process and show their previews
                    validFiles.forEach(file => {
                        // Only create a preview if the file is not already added
                        if (!selectedFiles.includes(file)) {
                            const reader = new FileReader();

                            // Create a new wrapper for each file
                            const imgWrapper = document.createElement('div');
                            imgWrapper.classList.add('file-wrapper');

                            // Create the delete button
                            const deleteBtn = document.createElement('button');
                            deleteBtn.classList.add('delete-btn');
                            deleteBtn.innerHTML = '&times;'; // "X" symbol
                            deleteBtn.setAttribute('data-filename', file.name); // Store the filename for deletion
                            imgWrapper.appendChild(deleteBtn); // Add the delete button to the wrapper

                            reader.onload = function(e) {
                                if (file.type.startsWith('image/') || file.name.endsWith('.gif')) {
                                    const img = document.createElement('img');
                                    img.src = e.target.result;
                                    img.classList.add('img-thumbnail');
                                    imgWrapper.appendChild(img);
                                } else if (file.type === 'video/mp4') {
                                    const video = document.createElement('video');
                                    video.src = e.target.result;
                                    video.classList.add('video-thumbnail'); // Video styling
                                    video.controls = true; // Add controls for play/pause
                                    imgWrapper.appendChild(video);
                                }
                            };

                            // Append the wrapper (with preview) to the preview container
                            previewContainer.appendChild(imgWrapper);

                            // Store the valid file in the selectedFiles array
                            selectedFiles.push(file);

                            // Read the file as a data URL to generate a preview
                            reader.readAsDataURL(file);
                        }
                    });

                    // Update the file input list after processing valid files
                    updateFileInput();
                });

                function fetchCitiesData() {
                fetch('http://localhost:3005/public/data/cities.json') // Use the full URL
                    .then(response => response.json())
                    .then(data => {
                        console.log('Fetched data:', data);
                        loadCitiesAndPrefectures(data);
                    })
                    .catch(error => console.error('Error fetching cities data:', error));
                }

                function loadCitiesAndPrefectures(data) {
                    console.log('Data received in loadCitiesAndPrefectures:', data); // Log the received data

                    const citiesByPrefecture = {};
                    const cityToPrefectures = {};

                    data.forEach(item => {
                        if (!citiesByPrefecture[item.prefecture]) {
                            citiesByPrefecture[item.prefecture] = [];
                        }
                        citiesByPrefecture[item.prefecture].push(item.city);

                        if (!cityToPrefectures[item.city]) {
                            cityToPrefectures[item.city] = [];
                        }
                        cityToPrefectures[item.city].push(item.prefecture);
                    });

                    console.log('Cities by prefecture:', citiesByPrefecture); // Log the mapping
                    console.log('City to prefectures:', cityToPrefectures); // Log the mapping

                    const citySelect = document.getElementById('city-select');
                    const prefectureSelect = document.getElementById('prefecture-select');

                    console.log('City select element:', citySelect); // Log the city select element
                    console.log('Prefecture select element:', prefectureSelect); // Log the prefecture select element

                    // Populate the city dropdown
                    const uniqueCities = Object.keys(cityToPrefectures).sort((a, b) => a.localeCompare(b));
                    console.log('Unique cities:', uniqueCities); // Log unique cities
                    uniqueCities.forEach(city => {
                        const option = document.createElement('option');
                        option.value = city;
                        option.textContent = city;
                        citySelect.appendChild(option);
                    });

                    // Populate the prefecture dropdown
                    const uniquePrefectures = Object.keys(citiesByPrefecture).sort((a, b) => a.localeCompare(b));
                    console.log('Unique prefectures:', uniquePrefectures); // Log unique prefectures
                    uniquePrefectures.forEach(prefecture => {
                        const option = document.createElement('option');
                        option.value = prefecture;
                        option.textContent = prefecture;
                        prefectureSelect.appendChild(option);
                    });

                    // Ensure the prefecture dropdown is visible
                    prefectureSelect.style.display = 'block';

                    // Handle city selection change
                    citySelect.addEventListener('change', function() {
                        const selectedCity = this.value;
                        console.log('Selected city:', selectedCity); // Log the selected city

                        prefectureSelect.innerHTML = '<option selected value="">Select the Prefecture</option>';

                        if (selectedCity) {
                            const prefectures = cityToPrefectures[selectedCity];
                            console.log('Prefectures for selected city:', prefectures); // Log the prefectures

                            if (prefectures && prefectures.length > 0) {
                                prefectures.forEach(prefecture => {
                                    const option = document.createElement('option');
                                    option.value = prefecture;
                                    option.textContent = prefecture;
                                    prefectureSelect.appendChild(option);
                                });

                                if (prefectures.length === 1) {
                                    prefectureSelect.value = prefectures[0];
                                }
                            } else {
                                console.error("No prefecture found for city: " + selectedCity);
                            }
                        }
                    });
                }

                // Call the fetchCitiesData function when the document is ready
                document.addEventListener('DOMContentLoaded', function() {
                    fetchCitiesData(); // Fetch and load the data
                });

                // Function to fetch the categories JSON data
function fetchCategoriesData() {
    return fetch('http://localhost:3005/public/data/categories.json')
        .then(response => response.json())
        .catch(error => {
            console.error('Error fetching categories data:', error);
            throw error; // Rethrow error so it can be handled by the caller
        });
}

// Function to load categories and subcategories and populate the select dropdowns
// Accept `selectedCategory` and `selectedSubcategory` as parameters to handle pre-selected values
function loadCategoriesAndSubcategories(selectedCategory = '', selectedSubcategory = '') {
    // Fetch the data from the external JSON file
    fetchCategoriesData()
        .then(data => {
            const categoriesBySubcategory = {};

            // Organize data into a map for categories and subcategories
            data.forEach(item => {
                categoriesBySubcategory[item.category] = item.subcategory;
            });

            // Get the category select dropdown and subcategory select dropdown
            const categorySelect = document.getElementById('category-select');
            const subcategorySelect = document.getElementById('subcategory-select');

            // Clear the category select dropdown and populate it
            categorySelect.innerHTML = '';

            // Populate the category dropdown
            Object.keys(categoriesBySubcategory).forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            // If a selected category is provided, set it
            if (selectedCategory) {
                categorySelect.value = selectedCategory;
            }

            // Handle change in category selection
            categorySelect.addEventListener('change', function () {
                const selectedCategory = this.value;
                updateSubcategories(selectedCategory, selectedSubcategory); // Update subcategories when category changes
            });

            // Function to update subcategories based on the selected category
            function updateSubcategories(category, currentSubcategory) {
                // Clear previous subcategory options and add the placeholder
                subcategorySelect.innerHTML = '<option selected value="">Select Subcategory</option>';

                if (category) {
                    const subcategories = categoriesBySubcategory[category];
                    if (subcategories && subcategories.length > 0) {
                        // Subcategories found for this category
                        subcategories.forEach(subcategory => {
                            const option = document.createElement('option');
                            option.value = subcategory;
                            option.textContent = subcategory;
                            subcategorySelect.appendChild(option);
                        });

                        // If the pre-selected subcategory is no longer valid, set to the placeholder
                        if (currentSubcategory && !subcategories.includes(currentSubcategory)) {
                            subcategorySelect.value = ''; // Reset to placeholder if subcategory is no longer valid
                        } else if (subcategories.length === 1) {
                            subcategorySelect.value = subcategories[0];  // Auto-select the only subcategory
                        } else {
                            // Keep the pre-selected subcategory if it's valid
                            subcategorySelect.value = currentSubcategory;
                        }
                    }
                } else {
                    // If no category is selected, reset the subcategory to placeholder
                    subcategorySelect.value = '';
                }
            }

            // Initially, if the selected category is set, load the subcategories for that category
            if (selectedCategory) {
                updateSubcategories(selectedCategory, selectedSubcategory);
            } else {
                // If no category is selected, reset the subcategory to placeholder
                subcategorySelect.value = '';
            }

            // Ensure the subcategory dropdown is always visible
            subcategorySelect.style.display = 'block';
        })
        .catch(error => {
            console.error('Error loading categories and subcategories:', error);
        });
}

// Call the function when the document is ready
document.addEventListener('DOMContentLoaded', function() {
    // Example of pre-selected values (if any)
    const preSelectedCategory = document.getElementById('category-select').value; // Get from the HTML directly
    const preSelectedSubcategory = document.getElementById('subcategory-select').value; // Get from the HTML directly

    loadCategoriesAndSubcategories(preSelectedCategory, preSelectedSubcategory); // Fetch and load the data
});


            </script>
        </form>
    </div>
</div>
